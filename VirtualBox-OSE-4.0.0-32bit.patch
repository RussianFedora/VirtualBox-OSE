From a9548501755beeec6fa11b0c261f167164a4ee70 Mon Sep 17 00:00:00 2001
From: Lubomir Rintel <lkundrak@v3.sk>
Date: Fri, 26 Mar 2010 04:44:55 +0100
Subject: [PATCH] Build on x86_64 without 32bit toolchain.

This disables the check for 32bit toolchain and tests that need it
(boo).
---
 configure                              |    2 +-
 src/VBox/Devices/testcase/Makefile.kmk |    8 ++++++++
 src/VBox/VMM/testcase/Makefile.kmk     |    9 +++++++++
 3 files changed, 18 insertions(+), 1 deletions(-)

diff --git a/configure b/configure
index 42ce775..0932637 100755
--- a/configure
+++ b/configure
@@ -2525,7 +2525,7 @@ if [ "$OS" = "linux" ]; then
   fi
   check_libcap
   check_compiler_h
-  [ "$BUILD_MACHINE" = "amd64" -a $WITH_VMMRAW -eq 1 ] && check_32bit
+  #[ "$BUILD_MACHINE" = "amd64" -a $WITH_VMMRAW -eq 1 ] && check_32bit
   # tools/common/makeself*
   [ $OSE -ge 1 ] && check_makeself
 fi
diff --git a/src/VBox/Devices/testcase/Makefile.kmk b/src/VBox/Devices/testcase/Makefile.kmk
index 4debf81..59dae0d 100644
--- a/src/VBox/Devices/testcase/Makefile.kmk
+++ b/src/VBox/Devices/testcase/Makefile.kmk
@@ -45,22 +45,28 @@ VBOX_DEVICES_TESTS_FEATURES = \
 # We setup one 'other' target for executing the structure & alignment
 # validation testcases. Perhaps a bit hackish, but extremely useful.
 #
+ifneq ($(KBUILD_HOST_ARCH),amd64)
 ifeq ($(KBUILD_TARGET),$(KBUILD_HOST))
  ifeq ($(filter-out x86.x86 amd64.amd64 x86.amd64, $(KBUILD_TARGET_ARCH).$(KBUILD_HOST_ARCH)),)
   OTHERS += \
 	$(VBOX_DEVICES_TEST_OUT_DIR)/tstDeviceStructSize.run
  endif
 endif
+endif
 
 # The normal testing pass.
+ifneq ($(KBUILD_HOST_ARCH),amd64)
 TESTING += \
 	$(VBOX_DEVICES_TEST_OUT_DIR)/tstDeviceStructSize.run
+endif
 
 ifdef VBOX_WITH_RAW_MODE
  #
  # The testcase generator.
  #
+ifneq ($(KBUILD_HOST_ARCH),amd64)
  PROGRAMS += tstDeviceStructSizeRC
+endif
  tstDeviceStructSizeRC_TEMPLATE  = VBoxRcExe
  tstDeviceStructSizeRC_DEFS      = $(VBOX_DEVICES_TESTS_FEATURES)
  tstDeviceStructSizeRC_SOURCES   = tstDeviceStructSizeRC.cpp
@@ -73,7 +79,9 @@ endif # VBOX_WITH_RAW_MODE
 #
 # The testcase it self.
 #
+ifneq ($(KBUILD_HOST_ARCH),amd64)
 PROGRAMS += tstDeviceStructSize
+endif
 tstDeviceStructSize_TEMPLATE = VBOXR3AUTOTST
 tstDeviceStructSize_DEFS     = $(VBOX_DEVICES_TESTS_FEATURES)
 tstDeviceStructSize_INCS     = \
diff --git a/src/VBox/VMM/testcase/Makefile.kmk b/src/VBox/VMM/testcase/Makefile.kmk
index f947789..95882f1 100644
--- a/src/VBox/VMM/testcase/Makefile.kmk
+++ b/src/VBox/VMM/testcase/Makefile.kmk
@@ -21,10 +21,14 @@ include	$(KBUILD_PATH)/subheader.kmk
 #
 # Target lists.
 #
+ifneq ($(KBUILD_HOST_ARCH),amd64)
 PROGRAMS   += tstVMStructSize tstAsmStructs
+endif
 ifdef VBOX_WITH_RAW_MODE
+ifneq ($(KBUILD_HOST_ARCH),amd64)
  PROGRAMS  += tstVMStructRC tstAsmStructsRC
 endif
+endif
 ifndef VBOX_ONLY_EXTPACKS_USE_IMPLIBS
  PROGRAMS  += tstGlobalConfig tstInstrEmul
  ifdef VBOX_WITH_RAW_MODE
@@ -67,16 +71,21 @@ BLDDIRS += $(VBOX_VMM_TESTCASE_OUT_DIR)
 #
 ifeq ($(KBUILD_TARGET),$(KBUILD_HOST))
  ifeq ($(filter-out x86.x86 amd64.amd64 x86.amd64, $(KBUILD_TARGET_ARCH).$(KBUILD_HOST_ARCH)),)
+  ifneq ($(KBUILD_HOST_ARCH),amd64)
   OTHERS += \
 	$(VBOX_VMM_TESTCASE_OUT_DIR)/tstAsmStructs.run \
 	$(VBOX_VMM_TESTCASE_OUT_DIR)/tstVMStructSize.run
+  endif
  endif
 endif
 
 # The normal testing pass.
+
+ifneq ($(KBUILD_HOST_ARCH),amd64)
 TESTING += \
 	$(VBOX_VMM_TESTCASE_OUT_DIR)/tstAsmStructs.run \
 	$(VBOX_VMM_TESTCASE_OUT_DIR)/tstVMStructSize.run
+endif
 ifndef VBOX_ONLY_EXTPACKS_USE_IMPLIBS
  TESTING += \
 	$(VBOX_VMM_TESTCASE_OUT_DIR)/tstInstrEmul.run
-- 
1.7.3.4

